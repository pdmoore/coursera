See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 7 warnings)

Correctness:  31/49 tests passed
Memory:       22/22 tests passed
Timing:       25/125 tests passed

Aggregate score: 61.96%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.5K Jan 21 01:08 Board.java
3.1K Jan 21 01:08 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'solve()' is never called.  At Solver.java:[lines 48-63]
Warnings generated: 1


================================================================


% pmd .
*-----------------------------------------------------------
Solver.java:10: Can you replace the instance (or static) variable 'minPQ' with a local variable? [SingularField]
Solver.java:10: The private instance (or static) variable 'minPQ' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:47: Avoid unused private methods, such as 'solve(MinPQ)'. [UnusedPrivateMethod]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Solver.java:24:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] Solver.java:47:36: The local (or parameter) variable 'minPQ' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Solver.java:70:28: Boolean expression can be simplified, e.g., use 'if (!isEmpty)' instead of 'if (isEmpty == false)'. [SimplifyBooleanExpression]
[WARN] Solver.java:84:28: Boolean expression can be simplified, e.g., use 'if (!isEmpty)' instead of 'if (isEmpty == false)'. [SimplifyBooleanExpression]
Checkstyle ends with 0 errors and 4 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------
[WARN] Solver.java:1: Declaring 1 non-final static variables ('manhattanComparator') suggests poor design in this class. [StaticVariableCount]
[WARN] Solver.java:10:13: Can you make the variable of type 'MinPQ' a local variable instead of an instance (or static) variable? [Design]
[WARN] Solver.java:24:20: Can you make the variable of type 'Comparator' a local variable instead of an instance (or static) variable? [Design]
Checkstyle ends with 0 errors and 3 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 24 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * Board object stored in a variable of type Object
==> passed

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
  * n = 3
  * n = 4
  * 5 <= n < 10
==> passed

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check dimension() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 15: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt
  * 2nd neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 24/24 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2            88                  128
=> passed     3           104                  192
=> passed     4           136                  240
=> passed     8           328                  560
=> passed    12           648                 1008
=> passed    16          1096                 1584
=> passed    20          1672                 2288
=> passed    37          5544                 6856
=> passed    72         20808                23088
=> passed   120         57672                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 0.00 n + 72.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 0
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0

  * puzzle01.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 1
    - board =
        2
         1  0
         3  2

  * puzzle02.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 2
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64 65 66 67 68 69 70  0 71
        73 74 75 76 77 78 79 80 72

  * puzzle03.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 3
    - board =
        2
         2  0
         1  3

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        3
         0  1  3
         4  2  5
         7  8  6

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        3
         4  1  3
         0  2  6
         7  5  8

  * puzzle06.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 6
    - board =
        4
         0  1  2  3
         5  6  7  4
         9 10 11  8
        13 14 15 12

  * puzzle07.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 7
    - board =
        3
         1  2  3
         0  7  6
         5  4  8

  * puzzle08.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 8
    - board =
        3
         2  3  5
         1  0  4
         7  8  6

  * puzzle09.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 9
    - board =
        4
         2  0  3  4
         1 10  6  8
         5  9  7 12
        13 14 11 15

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

  * puzzle11.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 11
    - board =
        3
         1  0  2
         7  5  4
         8  6  3

  * puzzle12.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 12
    - board =
        5
         1  2  3  4  5
        12  6  8  9 10
         0  7 13 19 14
        11 16 17 18 15
        21 22 23 24 20

  * puzzle13.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 13
    - board =
        4
         2  3  4  8
         1  6  0 12
         5 10  7 11
         9 13 14 15

==> FAILED

Test 1b: check solution() with file inputs
  * puzzle00.txt
    - solution() incorrectly returns null

  * puzzle01.txt
    - solution() incorrectly returns null

  * puzzle02.txt
    - solution() incorrectly returns null

  * puzzle03.txt
    - solution() incorrectly returns null

  * puzzle04.txt
    - solution() incorrectly returns null

  * puzzle05.txt
    - solution() incorrectly returns null

  * puzzle06.txt
    - solution() incorrectly returns null

  * puzzle07.txt
    - solution() incorrectly returns null

  * puzzle08.txt
    - solution() incorrectly returns null

  * puzzle09.txt
    - solution() incorrectly returns null

  * puzzle10.txt
    - solution() incorrectly returns null

  * puzzle11.txt
    - solution() incorrectly returns null

  * puzzle12.txt
    - solution() incorrectly returns null

  * puzzle13.txt
    - solution() incorrectly returns null

==> FAILED

Test 2a: check moves() with more file inputs
  * puzzle14.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 14
    - board =
        7
         1  2  3  4  5  7 14
         8  9 10 11 12 13  6
        15 16 17 18 19 20 21
        22 23 24 25 26 27 28
        29 30 31 32  0 33 34
        36 37 38 39 40 41 35
        43 44 45 46 47 48 42

  * puzzle15.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 15
    - board =
        8
         1  2  3  4  5  6  7  8
         9 10 11 12 13 14 15 16
        17 18 19 20 21 22 23 24
         0 25 27 28 29 30 31 32
        34 26 35 36 37 38 39 40
        33 41 42 43 45 46 47 48
        49 50 51 44 61 53 54 56
        57 58 59 52 60 62 55 63

  * puzzle16.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 16
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 47 37 39 40
        41 42 43 44 45 46  0 38 49 50
        51 52 53 54 55 56 57 48 59 60
        61 62 63 64 65 66 67 58 69 80
        71 72 73 74 75 76 77 68 70 78
        81 82 83 84 85 86 87 88 79 89
        91 92 93 94 95 96 97 98 99 90

  * puzzle17.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 17
    - board =
        3
         5  1  8
         2  7  3
         4  0  6

  * puzzle18.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 18
    - board =
        3
         5  6  2
         1  8  4
         7  3  0

  * puzzle19.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 19
    - board =
        3
         1  2  7
         0  4  3
         6  5  8

  * puzzle20.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 20
    - board =
        3
         1  6  4
         7  0  8
         2  3  5

  * puzzle21.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 21
    - board =
        3
         5  2  3
         4  7  0
         8  6  1

  * puzzle22.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 22
    - board =
        3
         4  8  2
         3  6  5
         1  7  0

  * puzzle23.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 23
    - board =
        3
         5  0  4
         2  3  8
         7  1  6

  * puzzle24.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 24
    - board =
        3
         5  7  4
         3  0  8
         1  6  2

  * puzzle25.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 25
    - board =
        3
         2  8  5
         3  6  1
         7  0  4

  * puzzle26.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 26
    - board =
        3
         5  7  0
         3  2  8
         1  6  4

  * puzzle27.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 27
    - board =
        3
         5  8  7
         1  4  6
         3  0  2

  * puzzle28.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 28
    - board =
        3
         7  8  5
         4  0  2
         3  6  1

  * puzzle29.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 29
    - board =
        3
         6  0  5
         8  7  4
         3  2  1

  * puzzle30.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 30
    - board =
        3
         8  4  7
         1  5  6
         3  2  0

  * puzzle31.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 31
    - board =
        3
         8  6  7
         2  5  4
         3  0  1

==> FAILED

Test 2b: check solution() with more file inputs
  * puzzle14.txt
    - solution() incorrectly returns null

  * puzzle15.txt
    - solution() incorrectly returns null

  * puzzle16.txt
    - solution() incorrectly returns null

  * puzzle17.txt
    - solution() incorrectly returns null

  * puzzle18.txt
    - solution() incorrectly returns null

  * puzzle19.txt
    - solution() incorrectly returns null

  * puzzle20.txt
    - solution() incorrectly returns null

  * puzzle21.txt
    - solution() incorrectly returns null

  * puzzle22.txt
    - solution() incorrectly returns null

  * puzzle23.txt
    - solution() incorrectly returns null

  * puzzle24.txt
    - solution() incorrectly returns null

  * puzzle25.txt
    - solution() incorrectly returns null

  * puzzle26.txt
    - solution() incorrectly returns null

  * puzzle27.txt
    - solution() incorrectly returns null

  * puzzle28.txt
    - solution() incorrectly returns null

  * puzzle29.txt
    - solution() incorrectly returns null

  * puzzle30.txt
    - solution() incorrectly returns null

  * puzzle31.txt
    - solution() incorrectly returns null

==> FAILED

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 1
    - board =
        3
         1  2  3
         4  5  0
         7  8  6

    - failed on trial 1 of 1000

==> FAILED

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
    - solution() incorrectly returns null

    - failed on trial 1 of 1000

==> FAILED

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = -1
    - reference moves() for puzzle04.txt = 4

  * puzzle00.txt and puzzle04.txt
    - wrong number of moves()
    - student   moves() for puzzle00.txt = -1
    - reference moves() for puzzle00.txt = 0

  * puzzle04.txt and puzzle00.txt
    - wrong number of moves()
    - student   moves() for puzzle04.txt = -1
    - reference moves() for puzzle04.txt = 4

==> FAILED

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         1  0
         3  2

  * puzzle03.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  0
         1  3

  * puzzle04.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         0  1  3
         4  2  5
         7  8  6

  * puzzle17.txt
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        3
         5  1  8
         2  7  3
         4  0  6

  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> FAILED

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
    - student   isSolvable() = false
    - reference isSolvable() = true
    - board =
        2
         2  3
         1  0

    - failed on trial 1 of 100

==> FAILED

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle00.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 0
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0

    - solution() incorrectly returns null

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        3
         0  1  3
         4  2  5
         7  8  6

    - solution() incorrectly returns null

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        3
         4  1  3
         0  2  6
         7  5  8

    - solution() incorrectly returns null

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - solution() incorrectly returns null

    - did not call the equals() method in Board
    - likely a bug in the critical optimization

==> FAILED

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 0
    - board =
        10
         1  2  3  4  5  6  7  8  9 10
        11 12 13 14 15 16 17 18 19 20
        21 22 23 24 25 26 27 28 29 30
        31 32 33 34 35 36 37 38 39 40
        41 42 43 44 45 46 47 48 49 50
        51 52 53 54 55 56 57 58 59 60
        61 62 63 64 65 66 67 68 69 70
        71 72 73 74 75 76 77 78 79 80
        81 82 83 84 85 86 87 88 89 90
        91 92 93 94 95 96 97 98 99  0

    - solution() incorrectly returns null

  * puzzle04.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        3
         0  1  3
         4  2  5
         7  8  6

    - solution() incorrectly returns null

  * puzzle05.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        3
         4  1  3
         0  2  6
         7  5  8

    - solution() incorrectly returns null

  * puzzle10.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 10
    - board =
        9
         1  2  3  4  5  6  7  8  9
        10 11 12 13 14 15 16 17 18
        19 20 21 22 23 24 25 26 27
        28 29 30 31 32 33 34 35 36
        37 38 39 40 41 42 43 44 45
        46 47 48 49 50 51 52 53 54
        55 56 57 58 59 60 61 62 63
        64  0 65 67 68 78 69 70 72
        73 74 66 75 76 77 79 71 80

    - solution() incorrectly returns null

==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 0
    - board =
        2
         1  2
         3  0

  * puzzle2x2-01.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 1
    - board =
        2
         1  2
         0  3

  * puzzle2x2-02.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 2
    - board =
        2
         0  1
         3  2

  * puzzle2x2-03.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 3
    - board =
        2
         3  1
         0  2

  * puzzle2x2-04.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        2
         2  3
         1  0

  * puzzle2x2-05.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        2
         2  3
         0  1

  * puzzle2x2-06.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 6
    - board =
        2
         0  3
         2  1

==> FAILED

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
    - solution() incorrectly returns null

  * puzzle2x2-01.txt
    - solution() incorrectly returns null

  * puzzle2x2-02.txt
    - solution() incorrectly returns null

  * puzzle2x2-03.txt
    - solution() incorrectly returns null

  * puzzle2x2-04.txt
    - solution() incorrectly returns null

  * puzzle2x2-05.txt
    - solution() incorrectly returns null

  * puzzle2x2-06.txt
    - solution() incorrectly returns null

==> FAILED

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 0
    - board =
        3
         1  2  3
         4  5  6
         7  8  0

  * puzzle3x3-01.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 1
    - board =
        3
         1  2  3
         4  5  0
         7  8  6

  * puzzle3x3-02.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 2
    - board =
        3
         1  2  3
         4  0  5
         7  8  6

  * puzzle3x3-03.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 3
    - board =
        3
         1  2  3
         0  4  5
         7  8  6

  * puzzle3x3-04.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        3
         0  1  2
         4  5  3
         7  8  6

  * puzzle3x3-05.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        3
         1  0  2
         4  6  3
         7  5  8

  * puzzle3x3-06.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 6
    - board =
        3
         1  2  0
         4  8  3
         7  6  5

  * puzzle3x3-07.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 7
    - board =
        3
         1  2  3
         0  4  8
         7  6  5

  * puzzle3x3-08.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 8
    - board =
        3
         0  4  3
         2  1  6
         7  5  8

  * puzzle3x3-09.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 9
    - board =
        3
         1  3  6
         5  2  8
         4  0  7

  * puzzle3x3-10.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 10
    - board =
        3
         0  4  1
         5  3  2
         7  8  6

  * puzzle3x3-11.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 11
    - board =
        3
         1  3  5
         7  2  6
         8  0  4

  * puzzle3x3-12.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 12
    - board =
        3
         4  1  2
         3  0  6
         5  7  8

  * puzzle3x3-13.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 13
    - board =
        3
         4  3  1
         0  7  2
         8  5  6

  * puzzle3x3-14.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 14
    - board =
        3
         3  4  6
         2  0  8
         1  7  5

  * puzzle3x3-15.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 15
    - board =
        3
         2  0  8
         1  3  5
         4  6  7

  * puzzle3x3-16.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 16
    - board =
        3
         5  2  1
         4  8  3
         7  6  0

  * puzzle3x3-17.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 17
    - board =
        3
         4  3  1
         0  2  6
         7  8  5

  * puzzle3x3-18.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 18
    - board =
        3
         1  4  3
         7  0  8
         6  5  2

  * puzzle3x3-19.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 19
    - board =
        3
         7  0  4
         8  5  1
         6  3  2

  * puzzle3x3-20.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 20
    - board =
        3
         7  4  3
         2  8  6
         0  5  1

  * puzzle3x3-21.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 21
    - board =
        3
         8  7  2
         1  5  0
         4  6  3

  * puzzle3x3-22.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 22
    - board =
        3
         5  3  6
         4  0  7
         1  8  2

  * puzzle3x3-23.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 23
    - board =
        3
         6  0  8
         4  3  5
         1  2  7

  * puzzle3x3-24.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 24
    - board =
        3
         6  5  3
         4  1  7
         0  2  8

  * puzzle3x3-25.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 25
    - board =
        3
         8  3  5
         6  4  2
         1  0  7

  * puzzle3x3-26.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 26
    - board =
        3
         4  8  7
         5  3  1
         0  6  2

  * puzzle3x3-27.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 27
    - board =
        3
         1  6  4
         0  3  5
         8  2  7

  * puzzle3x3-28.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 28
    - board =
        3
         6  3  8
         5  4  1
         7  2  0

  * puzzle3x3-29.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 29
    - board =
        3
         1  8  5
         0  2  4
         3  6  7

  * puzzle3x3-30.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 30
    - board =
        3
         8  6  7
         2  0  4
         3  5  1

==> FAILED

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
    - solution() incorrectly returns null

  * puzzle3x3-01.txt
    - solution() incorrectly returns null

  * puzzle3x3-02.txt
    - solution() incorrectly returns null

  * puzzle3x3-03.txt
    - solution() incorrectly returns null

  * puzzle3x3-04.txt
    - solution() incorrectly returns null

  * puzzle3x3-05.txt
    - solution() incorrectly returns null

  * puzzle3x3-06.txt
    - solution() incorrectly returns null

  * puzzle3x3-07.txt
    - solution() incorrectly returns null

  * puzzle3x3-08.txt
    - solution() incorrectly returns null

  * puzzle3x3-09.txt
    - solution() incorrectly returns null

  * puzzle3x3-10.txt
    - solution() incorrectly returns null

  * puzzle3x3-11.txt
    - solution() incorrectly returns null

  * puzzle3x3-12.txt
    - solution() incorrectly returns null

  * puzzle3x3-13.txt
    - solution() incorrectly returns null

  * puzzle3x3-14.txt
    - solution() incorrectly returns null

  * puzzle3x3-15.txt
    - solution() incorrectly returns null

  * puzzle3x3-16.txt
    - solution() incorrectly returns null

  * puzzle3x3-17.txt
    - solution() incorrectly returns null

  * puzzle3x3-18.txt
    - solution() incorrectly returns null

  * puzzle3x3-19.txt
    - solution() incorrectly returns null

  * puzzle3x3-20.txt
    - solution() incorrectly returns null

  * puzzle3x3-21.txt
    - solution() incorrectly returns null

  * puzzle3x3-22.txt
    - solution() incorrectly returns null

  * puzzle3x3-23.txt
    - solution() incorrectly returns null

  * puzzle3x3-24.txt
    - solution() incorrectly returns null

  * puzzle3x3-25.txt
    - solution() incorrectly returns null

  * puzzle3x3-26.txt
    - solution() incorrectly returns null

  * puzzle3x3-27.txt
    - solution() incorrectly returns null

  * puzzle3x3-28.txt
    - solution() incorrectly returns null

  * puzzle3x3-29.txt
    - solution() incorrectly returns null

  * puzzle3x3-30.txt
    - solution() incorrectly returns null

==> FAILED

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 0
    - board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11 12
        13 14 15  0

  * puzzle4x4-01.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 1
    - board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11  0
        13 14 15 12

  * puzzle4x4-02.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 2
    - board =
        4
         1  2  3  4
         5  6  7  0
         9 10 11  8
        13 14 15 12

  * puzzle4x4-03.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 3
    - board =
        4
         1  2  3  4
         5  6  0  8
         9 10  7 12
        13 14 11 15

  * puzzle4x4-04.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        4
         1  2  3  4
         5  0  7  8
         9  6 11 12
        13 10 14 15

  * puzzle4x4-05.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        4
         1  2  3  4
         5  6  7  8
        10  0 11 12
         9 13 14 15

  * puzzle4x4-06.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 6
    - board =
        4
         1  6  2  4
         5  0  3  8
         9 10  7 11
        13 14 15 12

  * puzzle4x4-07.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 7
    - board =
        4
         1  2  3  4
         6 10  7  8
         5  0 11 12
         9 13 14 15

  * puzzle4x4-08.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 8
    - board =
        4
         1  2  3  4
         5 10  6  8
        13  9  7 12
        14  0 11 15

  * puzzle4x4-09.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 9
    - board =
        4
         2  3  4  0
         1  6  7  8
         5 10 11 12
         9 13 14 15

  * puzzle4x4-10.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 10
    - board =
        4
         1  2  4 12
         5  6  3  0
         9 10  8  7
        13 14 11 15

  * puzzle4x4-11.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 11
    - board =
        4
         5  1  3  4
         9  2  7  8
        13  0 10 12
        14  6 11 15

  * puzzle4x4-12.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 12
    - board =
        4
         5  1  2  4
         9  6  3  7
        13 10  0  8
        14 15 11 12

  * puzzle4x4-13.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 13
    - board =
        4
         5  3  4  8
         2  1  0  7
         9  6 10 11
        13 14 15 12

  * puzzle4x4-14.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 14
    - board =
        4
         1  2  8  3
         5 11  6  4
         0 10  7 12
         9 13 14 15

  * puzzle4x4-15.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 15
    - board =
        4
         5  1  3  4
        13  2  7  8
         6 10 11 12
        14  9  0 15

  * puzzle4x4-16.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 16
    - board =
        4
         5  1  2  4
         6  0 10  7
        13 11  3  8
        14  9 15 12

  * puzzle4x4-17.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 17
    - board =
        4
         5  2  4  0
         6  1  3  8
        13 11  7 12
        10  9 14 15

  * puzzle4x4-18.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 18
    - board =
        4
         2  5  3  4
         1  7 11  8
         9  6  0 12
        13 14 15 10

  * puzzle4x4-19.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 19
    - board =
        4
         3  7  2  4
         1  5 10  8
         6  0 11 12
         9 13 14 15

  * puzzle4x4-20.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 20
    - board =
        4
         6  3  7  4
         2  9 10  8
         1  5 12 15
        13  0 14 11

  * puzzle4x4-21.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 21
    - board =
        4
         3  7  1  0
         6  2  8  4
         5 10 11 12
         9 13 14 15

  * puzzle4x4-22.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 22
    - board =
        4
         1  4  8  3
         7  2 10 11
         5  6  0 15
         9 13 14 12

  * puzzle4x4-23.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 23
    - board =
        4
         1  2  3  4
         5  6 14  8
        13  0  9 11
        10 12 15  7

  * puzzle4x4-24.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 24
    - board =
        4
         9  5  1  2
         6  4  8  3
        10 14  7 11
        13  0 15 12

  * puzzle4x4-25.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 25
    - board =
        4
         2  5  1  3
         9  6 12  4
        10 14  8  0
        13 11 15  7

  * puzzle4x4-26.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 26
    - board =
        4
         1 10  6  4
         5  9  2  8
        13 12  0  7
        14 11  3 15

  * puzzle4x4-27.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 27
    - board =
        4
         1  2  3  0
         5 12  7  4
        13  6 14  9
        10  8 11 15

  * puzzle4x4-28.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 28
    - board =
        4
         2  5  4  7
         9  1  3  8
        11 10  0  6
        14 13 15 12

  * puzzle4x4-29.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 29
    - board =
        4
         1  8  3  0
         5  7  4 12
        14  6  2 15
         9 13 10 11

  * puzzle4x4-30.txt
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 30
    - board =
        4
         2  4  8 12
         1  7  3 14
         0  6 15 11
         5  9 13 10

==> FAILED

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
    - solution() incorrectly returns null

  * puzzle4x4-01.txt
    - solution() incorrectly returns null

  * puzzle4x4-02.txt
    - solution() incorrectly returns null

  * puzzle4x4-03.txt
    - solution() incorrectly returns null

  * puzzle4x4-04.txt
    - solution() incorrectly returns null

  * puzzle4x4-05.txt
    - solution() incorrectly returns null

  * puzzle4x4-06.txt
    - solution() incorrectly returns null

  * puzzle4x4-07.txt
    - solution() incorrectly returns null

  * puzzle4x4-08.txt
    - solution() incorrectly returns null

  * puzzle4x4-09.txt
    - solution() incorrectly returns null

  * puzzle4x4-10.txt
    - solution() incorrectly returns null

  * puzzle4x4-11.txt
    - solution() incorrectly returns null

  * puzzle4x4-12.txt
    - solution() incorrectly returns null

  * puzzle4x4-13.txt
    - solution() incorrectly returns null

  * puzzle4x4-14.txt
    - solution() incorrectly returns null

  * puzzle4x4-15.txt
    - solution() incorrectly returns null

  * puzzle4x4-16.txt
    - solution() incorrectly returns null

  * puzzle4x4-17.txt
    - solution() incorrectly returns null

  * puzzle4x4-18.txt
    - solution() incorrectly returns null

  * puzzle4x4-19.txt
    - solution() incorrectly returns null

  * puzzle4x4-20.txt
    - solution() incorrectly returns null

  * puzzle4x4-21.txt
    - solution() incorrectly returns null

  * puzzle4x4-22.txt
    - solution() incorrectly returns null

  * puzzle4x4-23.txt
    - solution() incorrectly returns null

  * puzzle4x4-24.txt
    - solution() incorrectly returns null

  * puzzle4x4-25.txt
    - solution() incorrectly returns null

  * puzzle4x4-26.txt
    - solution() incorrectly returns null

  * puzzle4x4-27.txt
    - solution() incorrectly returns null

  * puzzle4x4-28.txt
    - solution() incorrectly returns null

  * puzzle4x4-29.txt
    - solution() incorrectly returns null

  * puzzle4x4-30.txt
    - solution() incorrectly returns null

==> FAILED

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 5
    - board =
        2
         2  3
         0  1

    - failed on trial 1 of 100

  * 200 random 3-by-3 boards that are <= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 8
    - board =
        3
         4  1  2
         6  0  3
         7  5  8

    - failed on trial 1 of 200

  * 200 random 4-by-4 boards that are <= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 1
    - board =
        4
         1  2  3  4
         5  6  7  8
         9 10 11  0
        13 14 15 12

    - failed on trial 1 of 200

  * 200 random 5-by-5 boards that are <= 20 moves from goal
    - moves() returns wrong value
    - student   moves() = -1
    - reference moves() = 4
    - board =
        5
         1  2  3  4  5
         6  7  8  9 10
        11 12 13 15  0
        16 17 18 14 20
        21 22 23 19 24

    - failed on trial 1 of 200

==> FAILED

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
    - solution() incorrectly returns null

    - failed on trial 1 of 100

  * 200 random 3-by-3 boards that are <= 20 moves from goal
    - solution() incorrectly returns null

    - failed on trial 1 of 200

  * 200 random 4-by-4 boards that are <= 20 moves from goal
    - solution() incorrectly returns null

    - failed on trial 1 of 200

  * 200 random 5-by-5 boards that are <= 20 moves from goal
    - solution() incorrectly returns null

    - failed on trial 1 of 200

==> FAILED


Total: 7/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      -1*     560
=> passed  puzzle15.txt      -1*     488
=> passed  puzzle20.txt      -1*     272
=> passed  puzzle25.txt      -1*     272
=> passed  puzzle30.txt      -1*     272
=> passed  puzzle35.txt      -1*     296
==> 6/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt        560                1                1
=> passed  puzzle15.txt        488                1                1
=> passed  puzzle20.txt        272                1                1
=> passed  puzzle25.txt        272                1                1
=> passed  puzzle30.txt        272                1                1
=> passed  puzzle35.txt        296                1                1
==> 6/6 tests passed


Total: 12/12 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> FAILED  puzzle20.txt      -1*   3     0.00
=> FAILED  puzzle22.txt      -1*   3     0.00
=> FAILED  puzzle21.txt      -1*   3     0.00
=> FAILED  puzzle23.txt      -1*   3     0.00
=> FAILED  puzzle24.txt      -1*   3     0.00
=> FAILED  puzzle25.txt      -1*   3     0.00
=> FAILED  puzzle27.txt      -1*   3     0.00
=> FAILED  puzzle29.txt      -1*   3     0.00
=> FAILED  puzzle26.txt      -1*   3     0.00
=> FAILED  puzzle28.txt      -1*   3     0.00
=> FAILED  puzzle30.txt      -1*   3     0.00
=> FAILED  puzzle31.txt      -1*   3     0.00
=> FAILED  puzzle39.txt      -1*   4     0.00
=> FAILED  puzzle41.txt      -1*   5     0.00
=> FAILED  puzzle34.txt      -1*   4     0.00
=> FAILED  puzzle37.txt      -1*   4     0.00
=> FAILED  puzzle44.txt      -1*   5     0.00
=> FAILED  puzzle32.txt      -1*   4     0.00
=> FAILED  puzzle35.txt      -1*   4     0.00
=> FAILED  puzzle33.txt      -1*   4     0.00
=> FAILED  puzzle43.txt      -1*   4     0.00
=> FAILED  puzzle46.txt      -1*   4     0.00
=> FAILED  puzzle40.txt      -1*   4     0.00
=> FAILED  puzzle36.txt      -1*   4     0.00
=> FAILED  puzzle45.txt      -1*   4     0.00
==> 0/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> FAILED  puzzle20.txt          1   (0.1x)       0   (0.0x)
=> FAILED  puzzle22.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle21.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle23.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle24.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle25.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle27.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle29.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle26.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle28.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle30.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle31.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle39.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle41.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle34.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle37.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle44.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle32.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle35.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle33.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle43.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle46.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle40.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle36.txt          1   (0.0x)       0   (0.0x)
=> FAILED  puzzle45.txt          1   (0.0x)       0   (0.0x)
==> 0/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0
=> passed  puzzle22.txt            0            0            0
=> passed  puzzle21.txt            0            0            0
=> passed  puzzle23.txt            0            0            0
=> passed  puzzle24.txt            0            0            0
=> passed  puzzle25.txt            0            0            0
=> passed  puzzle27.txt            0            0            0
=> passed  puzzle29.txt            0            0            0
=> passed  puzzle26.txt            0            0            0
=> passed  puzzle28.txt            0            0            0
=> passed  puzzle30.txt            0            0            0
=> passed  puzzle31.txt            0            0            0
=> passed  puzzle39.txt            0            0            0
=> passed  puzzle41.txt            0            0            0
=> passed  puzzle34.txt            0            0            0
=> passed  puzzle37.txt            0            0            0
=> passed  puzzle44.txt            0            0            0
=> passed  puzzle32.txt            0            0            0
=> passed  puzzle35.txt            0            0            0
=> passed  puzzle33.txt            0            0            0
=> passed  puzzle43.txt            0            0            0
=> passed  puzzle46.txt            0            0            0
=> passed  puzzle40.txt            0            0            0
=> passed  puzzle36.txt            0            0            0
=> passed  puzzle45.txt            0            0            0
==> 25/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt          1   (0.1x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle22.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle21.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle23.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle24.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle25.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle27.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle29.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle26.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle28.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle30.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle31.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle39.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle41.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle34.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle37.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle44.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle32.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle35.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle33.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle43.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> FAILED  puzzle46.txt          1   (0.0x)          0   (0.0x)          0   (0.0x)
=> F

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.